// –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–∞—Ä—Ç—ã

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export async function loadMarkersFromDB() {
  try {
    const response = await fetch('/admin/api/map/marker/loadMarkers');
    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ –ú–∞—Ä–∫–µ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', result.markers.length);
      return result.markers;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ä–∫–µ—Ä–æ–≤:', result.error);
      return [];
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞—Ä–∫–µ—Ä–æ–≤:', error);
    return [];
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
export async function addMarkerToDB(lng, lat) {
  try {
    console.log('üìç –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞:', { lng, lat });
    
    const response = await fetch('/admin/api/map/marker/addMarker', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ x: lng, y: lat }),
    });

    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ –ú–∞—Ä–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î:', result.marker);
      return result.marker;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞:', result.error);
      return null;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞:', error);
    return null;
  }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ
export function displayMarkersOnMap(mapInstance, markers) {
  if (!mapInstance || !markers || markers.length === 0) {
    console.log('‚ö†Ô∏è –ù–µ—Ç –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    return;
  }

  console.log('üó∫Ô∏è –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ:', markers.length);
  
  markers.forEach(marker => {
    new maplibregl.Marker({ color: '#FF0000' })
      .setLngLat([marker.x, marker.y])
      .setPopup(new maplibregl.Popup().setText(`–ú–∞—Ä–∫–µ—Ä #${marker.id}`))
      .addTo(mapInstance);
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
export function createMarkerClickHandler(mapInstance, onMarkerAdded) {
  return async (e) => {
    const { lng, lat } = e.lngLat;
    console.log('üìç –ö–ª–∏–∫ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞:', { lng, lat });

    const marker = await addMarkerToDB(lng, lat);
    
    if (marker) {
      // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–µ
      new maplibregl.Marker({ color: '#FF0000' })
        .setLngLat([lng, lat])
        .setPopup(new maplibregl.Popup().setText(`–ú–∞—Ä–∫–µ—Ä #${marker.id}`))
        .addTo(mapInstance);
      
      // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if (onMarkerAdded) {
        onMarkerAdded(marker);
      }
    }
  };
}
