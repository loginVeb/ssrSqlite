// Импорт хука useEffect из React для выполнения побочных эффектов
// useEffect используется для подписки на события рисования карты
import { useEffect } from "react";

// Экспорт пользовательского хука useDrawingHandlers для обработки событий рисования
// Принимает четыре параметра: экземпляр карты, инструмент рисования, массив зон и функцию обновления
export function useDrawingHandlers(mapInstance, drawInstance, zones, setZones) {
  // Хук useEffect для подписки на события рисования при монтировании компонента
  useEffect(() => {
    // Проверяем наличие инициализированной карты и инструмента рисования
    // Если хотя бы один из них не существует, выходим из эффекта
    if (!mapInstance.current || !drawInstance.current) return;

    // Обработка события создания новой геометрии (зоны или маркера)
    // Срабатывает при завершении рисования нового объекта
    mapInstance.current.on("draw.create", (e) => {
      // Получаем массив созданных объектов из события
      const features = e.features;
      // Добавляем новые объекты к существующим зонам
      // Используем функцию обновления состояния для добавления новых зон
      setZones((prev) => [...prev, ...features]);
    });

    // Обработка события удаления геометрии
    // Срабатывает при удалении объекта с карты
    mapInstance.current.on("draw.delete", (e) => {
      // Получаем массив удаленных объектов из события
      const deletedFeatures = e.features;
      // Проходим по каждому удаленному объекту
      deletedFeatures.forEach(feature => {
        // Получаем ID зоны из свойств объекта
        const zoneId = feature.properties?.id;
        // Проверяем, что ID существует и является числом
        if (zoneId && typeof zoneId === 'number') {
          // Обработка удаления будет в другом хуке (useDeleteHandlers)
          // Здесь только логируем или подготавливаем данные для удаления
        }
      });
    });

    // Обработка события обновления геометрии
    // Срабатывает при изменении формы или положения существующего объекта
    mapInstance.current.on("draw.update", (e) => {
      // Получаем все текущие зоны из инструмента рисования
      const currentZones = drawInstance.current.getAll().features;
      // Обновляем состояние зон в React
      // Это синхронизирует состояние React с текущим состоянием на карте
      setZones(currentZones);
    });
  }, [mapInstance, drawInstance, zones, setZones]); // Зависимости: перезапуск при изменении любого из параметров
}
