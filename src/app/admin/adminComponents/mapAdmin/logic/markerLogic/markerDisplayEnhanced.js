// –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π

import maplibregl from "maplibre-gl";

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–∞ –∫–∞—Ä—Ç–µ —Å –æ—á–∏—Å—Ç–∫–æ–π —Å—Ç–∞—Ä—ã—Ö
export function displayMarkers(mapInstance, markers, markersRef) {
  if (!mapInstance || !markers) {
    console.warn('‚ö†Ô∏è –ù–µ—Ç –∫–∞—Ä—Ç—ã –∏–ª–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    return;
  }

  //console.log('üó∫Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤:', markers.length);

  // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –º–∞—Ä–∫–µ—Ä—ã
  if (markersRef.current) {
    markersRef.current.forEach(marker => marker.remove());
    markersRef.current = [];
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã
  const bounds = mapInstance.getBounds();
  console.log('üìç –ì—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã:', bounds);

  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
  if (markers.length > 0) {
    markers.forEach((marker, index) => {
      console.log(`üìç –ú–∞—Ä–∫–µ—Ä ${index + 1}:`, { x: marker.x, y: marker.y });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
      if (!marker.x || !marker.y) {
        console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –º–∞—Ä–∫–µ—Ä–∞ ${marker.id}:`, marker);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –≤–∏–¥–∏–º–æ—Å—Ç–∏
      if (!bounds.contains([marker.x, marker.y])) {
        console.warn(`‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ä ${marker.id} –≤–Ω–µ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏:`, [marker.x, marker.y]);
      }

      try {
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        const markerElement = document.createElement('div');
        markerElement.style.width = '10px';
        markerElement.style.height = '10px';
        markerElement.style.borderRadius = '50%';
        markerElement.style.backgroundColor = '#FF0000';
        markerElement.style.border = '2px solid white';
        markerElement.style.position = 'absolute';
        markerElement.style.top = '0';
        markerElement.style.left = '0';
        markerElement.style.cursor = 'pointer';
        markerElement.style.transform = 'translate(-50%, -50%)';
        markerElement.style.pointerEvents = 'auto';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Ç–æ—á–∫—É –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        const innerDot = document.createElement('div');
        innerDot.style.width = '6px';
        innerDot.style.height = '6px';
        innerDot.style.borderRadius = '50%';
        innerDot.style.backgroundColor = 'white';
        innerDot.style.position = 'absolute';
        innerDot.style.top = '50%';
        innerDot.style.left = '50%';
        innerDot.style.transform = 'translate(-50%, -50%)';
        markerElement.appendChild(innerDot);

        const mapMarker = new maplibregl.Marker({
          element: markerElement,
          anchor: 'bottom',
          offset: [0, -12]
        })
          .setLngLat([marker.x, marker.y])
          .setPopup(new maplibregl.Popup().setText(`–ú–∞—Ä–∫–µ—Ä #${marker.id}`))
          .addTo(mapInstance);

        console.log(`‚úÖ –ú–∞—Ä–∫–µ—Ä ${marker.id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É`);
        markersRef.current.push(mapMarker);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞ ${marker.id}:`, error);
      }
    });

    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    if (mapInstance._rerender) {
      mapInstance._rerender();
    }
  }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞ –Ω–∞ –∫–∞—Ä—Ç—É
export function addMarkerToMap(mapInstance, marker, markersRef) {
  if (!mapInstance || !marker) {
    console.warn('‚ö†Ô∏è –ù–µ—Ç –∫–∞—Ä—Ç—ã –∏–ª–∏ –º–∞—Ä–∫–µ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è');
    return null;
  }

  console.log('üéØ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –Ω–∞ –∫–∞—Ä—Ç—É:', marker);

  try {
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Ä–∫–µ—Ä–∞
    const markerElement = document.createElement('div');
    markerElement.style.width = '10px';
    markerElement.style.height = '10px';
    markerElement.style.borderRadius = '50%';
    markerElement.style.backgroundColor = '#FF0000';
    markerElement.style.border = '3px solid white';
    markerElement.style.zIndex = '1000';
    markerElement.style.position = 'relative';
    markerElement.style.cursor = 'pointer';

    const mapMarker = new maplibregl.Marker({
      element: markerElement,
      anchor: 'bottom',
      offset: [0, -12]
    })
      .setLngLat([marker.x, marker.y])
      .setPopup(new maplibregl.Popup().setText(`–ú–∞—Ä–∫–µ—Ä #${marker.id}`))
      .addTo(mapInstance);

    console.log('‚úÖ –ù–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ –∫–∞—Ä—Ç—É');
    markersRef.current.push(mapMarker);
    
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
    if (mapInstance._rerender) {
      mapInstance._rerender();
    }
    
    return mapMarker;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ä–∫–µ—Ä–∞:', error);
    return null;
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º–∞—Ä–∫–µ—Ä–æ–≤
export function validateMarkers(markers) {
  return markers.filter(marker => {
    const isValid = marker.x && marker.y && 
                   typeof marker.x === 'number' && 
                   typeof marker.y === 'number' &&
                   !isNaN(marker.x) && 
                   !isNaN(marker.y);
    
    if (!isValid) {
      console.warn('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–∞—Ä–∫–µ—Ä–∞:', marker);
    }
    
    return isValid;
  });
}
